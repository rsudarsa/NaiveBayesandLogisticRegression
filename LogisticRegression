import os
import copy
import re
import math
import time
import sys
startTime = time.time()

trainingDataPath = sys.argv[1]
testDataPath = sys.argv[2]
learningRate = float(sys.argv[3])
regularizationParam = float(sys.argv[4])

def readTxtInGivenFile(filename,mylist):
    with open(filename,'r') as f:
        for line in f:
            words = line.split(' ')
            for w in words:
                if(re.sub('[\W]','', w) is not ''):
                    mylist.append(re.sub('[\W]','', w))

def getDataFromPath(path):
    dict = {}
    for dir in os.listdir(path):
        dict[dir] = [path + '/' + dir + '/' + filename for filename in os.listdir(path + '/' + dir)]
    return dict;

def countofItems(text, Vocab):
    count = []

    for item in Vocab:
        count.append(text.count(item))
    return count
def constructX(D,total):
    XforHam = []
    for documents in D['ham']:
        txt = []
        txtCount = [1]
        readTxtInGivenFile(documents, txt)
        txtCount = txtCount + countofItems(txt, total)
        txtCount.append(1)
        XforHam.append(txtCount)
    XforSpam = []
    for documents in D['spam']:
        txt = []
        txtCount = [1]
        readTxtInGivenFile(documents, txt)
        txtCount = txtCount + countofItems(txt, total)
        txtCount.append(0)
        XforSpam.append(txtCount)

    return XforHam + XforSpam

def summation(X,W,sumValue):
    for x,w in zip(X,W):
        if(x==1):
            sumValue = sumValue + float(x)*float(w)
    return float(sumValue)

def sigmoid(x):
    try:
        sigValue  = 1.0 / float((1 + math.exp(-x)))
    except OverflowError:
        sigValue = i/float('inf')

    return sigValue;

def calculateConditiontal(condProbability,X):
    for indx, x in enumerate(X):
        sumValue = 0;
        sumValue = float(summation(x,W, sumValue))
        if(x[-1] == 1):
            condProbability['Y given X at Document '+str(indx)] = sigmoid(sumValue)
        else:
            condProbability['Y given X at Document '+str(indx)] = 1 - sigmoid(sumValue)

def sumOverDocs(indx,X,condProbability):
    sum = 0
    for i in range(0,len(X)):
        sum = sum + (X[i][indx]*(X[i][-1] - condProbability['Y given X at Document '+str(i)]))
    return sum

def updateWeight(X,W,condProbability):
    updatedWeight = []
    for indx,i in enumerate(W):
        updatedWeight.append(i + learningRate*(sumOverDocs(indx,X,condProbability)) - (learningRate*regularizationParam*i))
    return updatedWeight


def sumOnTest(learnedWeights, X):
    sum  =0
    for indx,i in enumerate(learnedWeights):
        sum = sum + (i * X[indx])
    return sum

def applyLogisticRegression(learnedWeights, Xtest):
    ClassFromLogisticRegression = []
    for x in Xtest:
        ClassFromLogisticRegression.append(sumOnTest(learnedWeights,x))
    return ClassFromLogisticRegression;


C = ['ham','spam']
D = {}
T = {}
total= []
stopWords = ['a','about','above','after','again','against','all','am','an','and','any','are','aren\'t','as','at','be','because','been','before','being','below','between','both','but','by','can\'t','cannot','could','couldn\'t','did','didn\'t','do','does','doesn\'t','doing','don\'t','down','during','each','few','for','from','further','had','hadn\'t','has','hasn\'t','have','haven\'t','having','he','he\'d','he\'ll','he\'s','her','here','here\'s','hers','herself','him','himself','his','how','how\'s','i','i\'d','i\'ll','i\'m','i\'ve','if','in','into','is','isn\'t','it','it\'s','its','itself','let\'s','me','more','most','mustn\'t','my','myself','no','nor','not','of','off','on','once','only','or','other','ought','our','ours	ourselves','out','over','own','same','shan\'t','she','she\'d','she\'ll','she\'s','should','shouldn\'t','so','some','such','than','that','that\'s','the','their','theirs','them','themselves','then','there','there\'s','these','they','they\'d','they\'ll','they\'re','they\'ve','this','those','through','to','too','under','until','up','very','was','wasn\'t','we','we\'d','we\'ll','we\'re','we\'ve','were','weren\'t','what','what\'s','when','when\'s','where','where\'s','which','while','who','who\'s','whom','why','why\'s','with','won\'t','would','wouldn\'t','you','you\'d','you\'ll','you\'re','you\'ve','your','yours','yourself','yourselves']

stopWordsWithOutPunctuation = []
for words in stopWords:
    if (re.sub('[\W]', '', words) is not ''):
        stopWordsWithOutPunctuation.append(re.sub('[\W]', '', words))



print('CASE : Vocabulary having stop words')
D = getDataFromPath(trainingDataPath)
T = getDataFromPath(testDataPath)
[readTxtInGivenFile(filename,total) for documents in D.values() for filename in documents]
print('Vocabulary constructed')
total = list(set(total))
Xtrain = constructX(D,total)
print('Input training vector constructed')
Xtest = constructX(T,total)
print('Input test vector constructed')

W = [1] * (len(total)+1)
newWeight = [0] * (len(total) + 1)
print('Learning weights : ')
for i in range(0,100):
    conditionalProbability = {}
    calculateConditiontal(conditionalProbability, Xtrain)
    newWeight = updateWeight(Xtrain, W, conditionalProbability)
    W = copy.copy(newWeight)


learnedWeights = copy.copy(W)
print('Calculating class with learned weights')
Class = applyLogisticRegression(learnedWeights, Xtest)
ham = 0
spam = 0
for item in Class:
    if item < 0:
        ham= ham+1
    else:
        spam = spam+1

accuracy  = (float((len(T['ham']) + len(T['spam'])) - abs(ham - len(T['ham']))))/float((len(T['ham']) + len(T['spam'])))
print('Accuracy with stop words included ',accuracy * 100, '% ')
print ('This execution took %f minutes' % ((time.time()-startTime)/60))

startTime = time.time()
print('CASE : Vocabulary without stop words')
totalWithOutStopWords = list(set(total) - set(stopWordsWithOutPunctuation))
print('Vocabulary without stop words constructed')
Xtrain = constructX(D,totalWithOutStopWords)
print('Input training vector constructed')
Xtest = constructX(T,totalWithOutStopWords)
print('Input test vector constructed')
W = [1] * (len(totalWithOutStopWords)+1)
newWeight = [0] * (len(totalWithOutStopWords)+1)
print('Learning weights : ')
for i in range(0,100):

    conditionalProbability = {}
    calculateConditiontal(conditionalProbability, Xtrain)
    newWeight = updateWeight(Xtrain, W, conditionalProbability)
    W = copy.copy(newWeight)

learnedWeights = copy.copy(W)
print('Calculating class with learned weights')
Class = applyLogisticRegression(learnedWeights, Xtest)
ham = 0
spam = 0
for item in Class:
    if item > 0:
        ham= ham+1
    else:
        spam = spam+1

accuracy  = (float((len(T['ham']) + len(T['spam'])) - abs(ham - len(T['ham']))))/float((len(T['ham']) + len(T['spam'])))
print('Accuracy with out stopwords ',accuracy * 100, '% ')
print ('This execution took %f minutes' % ((time.time()-startTime)/60))