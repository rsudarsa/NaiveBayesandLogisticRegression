import os
import numpy
import re
import operator
import sys

trainingDataPath = sys.argv[1]
testDataPath = sys.argv[2]

def readTxtInGivenFile(filename,mylist):
    with open(filename) as f:
        for line in f:
            words = line.split(' ')
            for w in words:
                if(re.sub('[\W]','', w) is not ''):
                    mylist.append(re.sub('[\W]','', w))

def getDataFromPath(path):
    dict = {}
    for dir in os.listdir(path):
        dict[dir] = [path + '/' + dir + '/' + filename for filename in os.listdir(path + '/' + dir)]
    return dict;


def MNBtrain(C,D, total):
    Vocabulary = total
    N = len(D['spam'])+len(D['ham'])
    prior = {}
    for c in C:
        Nc = len(D[c])
        prior[c] = float(Nc)/float(N)
        textc = []
        [readTxtInGivenFile(filename,textc) for filename in D[c]]
        denom = len(textc) + len(Vocabulary)
        for t in Vocabulary :
           tCount = float(textc.count(t))
           condProbab[t+' given '+c] = float((tCount + 1 ))/ float(denom)
    return Vocabulary, prior, condProbab
def applyingMNBTraintoTest(Vocabulary, prior, condProbab, filename):

    fileContents = []
    readTxtInGivenFile(filename,fileContents)
    commonWords =   set(fileContents).intersection(set(Vocabulary))
    classScore = {}
    for c in C:
        classScore[c] = numpy.log(prior[c])
        for t in commonWords:
            classScore[c] = classScore[c] + numpy.log(condProbab[t+' given '+c])
    assignedClass = max(classScore.items(), key=operator.itemgetter(1))[0]
    return assignedClass


def classifyTest(T,Vocabulary, prior, condProbab):
    total = len(T['ham'])+len(T['spam'])
    misClassified = 0
    for c  in C:
        classAssigned = []
        filenames = T[c]
        for filename in filenames:
            classAssigned.append(applyingMNBTraintoTest(Vocabulary, prior, condProbab, filename))
        misClassified = misClassified + len(filenames) - classAssigned.count(c)
        precision = (float((total - misClassified)) / float(total) * 100)
    print("Accuracy on the test set = ", precision, " %")

C = ['ham','spam']
D = {}
T = {}
total= []
print('')
D = getDataFromPath(trainingDataPath)
print('Input training vector constructed')
T = getDataFromPath(testDataPath)
print('Input test vector constructed')
[readTxtInGivenFile(filename,total) for documents in D.values() for filename in documents]
print('Vocabulary constructed')
D['total'] = total
print('CASE : Vocabulary having stop words')
condProbab = {}
Vocabulary,prior, condProbab =  MNBtrain(C,D, total)
print('Classifying text')
classifyTest(T,Vocabulary, prior, condProbab)
stopWords = ['a','about','above','after','again','against','all','am','an','and','any','are','aren\'t','as','at','be','because','been','before','being','below','between','both','but','by','can\'t','cannot','could','couldn\'t','did','didn\'t','do','does','doesn\'t','doing','don\'t','down','during','each','few','for','from','further','had','hadn\'t','has','hasn\'t','have','haven\'t','having','he','he\'d','he\'ll','he\'s','her','here','here\'s','hers','herself','him','himself','his','how','how\'s','i','i\'d','i\'ll','i\'m','i\'ve','if','in','into','is','isn\'t','it','it\'s','its','itself','let\'s','me','more','most','mustn\'t','my','myself','no','nor','not','of','off','on','once','only','or','other','ought','our','ours	ourselves','out','over','own','same','shan\'t','she','she\'d','she\'ll','she\'s','should','shouldn\'t','so','some','such','than','that','that\'s','the','their','theirs','them','themselves','then','there','there\'s','these','they','they\'d','they\'ll','they\'re','they\'ve','this','those','through','to','too','under','until','up','very','was','wasn\'t','we','we\'d','we\'ll','we\'re','we\'ve','were','weren\'t','what','what\'s','when','when\'s','where','where\'s','which','while','who','who\'s','whom','why','why\'s','with','won\'t','would','wouldn\'t','you','you\'d','you\'ll','you\'re','you\'ve','your','yours','yourself','yourselves']
print('CASE : Vocabulary without stop words')

stopWordsWithOutPunctuation = []
for words in stopWords:
    if (re.sub('[\W]', '', words) is not ''):
        stopWordsWithOutPunctuation.append(re.sub('[\W]', '', words))
totalWithOutStopWords = list(set(total) - set(stopWordsWithOutPunctuation))
print('Vocabulary without stop words constructed')
condProbab = {}
VocabularyWithOutStopWords,prior, condProbab =  MNBtrain(C,D, totalWithOutStopWords)
print('Classifying text')
classifyTest(T,VocabularyWithOutStopWords, prior, condProbab)
